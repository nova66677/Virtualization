diff --git a/hw/misc/Kconfig b/hw/misc/Kconfig
index cc8a8c1..d6bc660 100644
--- a/hw/misc/Kconfig
+++ b/hw/misc/Kconfig
@@ -1,3 +1,7 @@
+config MY_RNG
+    bool
+    default y
+
 config APPLESMC
     bool
     depends on ISA_BUS
diff --git a/hw/misc/meson.build b/hw/misc/meson.build
index 36c20d5..b6f3ba9 100644
--- a/hw/misc/meson.build
+++ b/hw/misc/meson.build
@@ -1,3 +1,4 @@
+system_ss.add(when: 'CONFIG_MY_RNG', if_true: files('my-rng.c'))
 system_ss.add(when: 'CONFIG_APPLESMC', if_true: files('applesmc.c'))
 system_ss.add(when: 'CONFIG_EDU', if_true: files('edu.c'))
 system_ss.add(when: 'CONFIG_FW_CFG_DMA', if_true: files('vmcoreinfo.c'))
diff --git a/hw/misc/my-rng.c b/hw/misc/my-rng.c
new file mode 100644
index 0000000..e7f0f33
--- /dev/null
+++ b/hw/misc/my-rng.c
@@ -0,0 +1,87 @@
+#include "qemu/osdep.h"
+#include "hw/pci/msi.h"
+#include "hw/pci/pci.h"
+
+#define TYPE_MY_RNG "my_rng"
+#define MY_RNG(obj) OBJECT_CHECK(my_rng, (obj), TYPE_MY_RNG)
+
+typedef struct {
+    PCIDevice parent_obj;
+    uint32_t seed_register;
+    MemoryRegion mmio;
+} my_rng;
+
+static uint64_t mmio_read(void *opaque, hwaddr addr, unsigned size) {
+    my_rng *dev = (my_rng *)opaque;
+
+    switch (addr) {
+    case 0x00: // Address 0x00: Return a random value
+        return rand(); // Generate and return a new random number
+    case 0x04: // Address 0x04: Return the current seed
+        return dev->seed_register;
+    default:
+        // Invalid address
+        return 0x0;
+    }
+}
+
+static void mmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned size) {
+    my_rng *dev = (my_rng *)opaque;
+
+    switch (addr) {
+    case 0x00: 
+        // Writing to 0x00 can trigger RNG behavior if needed (no-op in this case)
+        break;
+    case 0x04: // Address 0x04: Set the RNG seed
+        dev->seed_register = (uint32_t)val;
+        srand(dev->seed_register); // Seed the RNG
+        break;
+    default:
+        // Invalid address
+        return;
+    }
+}
+
+static const MemoryRegionOps my_rng_ops = {
+    .read = mmio_read,
+    .write = mmio_write,
+};
+
+static void my_rng_realize(PCIDevice *pdev, Error **errp) {
+    my_rng *s = MY_RNG(pdev);
+    memory_region_init_io(&s->mmio, OBJECT(s), &my_rng_ops, s,
+                          "my_rng", 4096);
+    pci_register_bar(&s->parent_obj, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &s->mmio);
+}
+
+static void my_rng_class_init(ObjectClass *class, void *data) {
+    DeviceClass *dc = DEVICE_CLASS(class);
+    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
+
+    k->realize = my_rng_realize;
+    k->vendor_id = PCI_VENDOR_ID_QEMU;
+    k->device_id = 0xcafe;
+    k->revision = 0x10;
+    k->class_id = PCI_CLASS_OTHERS;
+    
+    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+}
+
+static void my_rng_register_types(void) {
+    static InterfaceInfo interfaces[] = {
+        { INTERFACE_CONVENTIONAL_PCI_DEVICE },
+        { },
+    };
+
+    static const TypeInfo my_rng_info = {
+        .name = TYPE_MY_RNG,
+        .parent = TYPE_PCI_DEVICE,
+        .instance_size = sizeof(my_rng),
+        .class_init    = my_rng_class_init,
+        .interfaces = interfaces,
+    };
+
+    type_register_static(&my_rng_info);
+}
+
+type_init(my_rng_register_types)
